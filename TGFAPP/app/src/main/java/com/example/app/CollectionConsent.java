package com.example.app;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class CollectionConsent extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620020fa380380620020fa83398101604081905262000034916200033b565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0387161790558351620000729060029060208701906200012b565b5060038390554260048190556200008b9083906200044a565b60055560005b8151811015620000f957600160086000848481518110620000b657620000b662000465565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620000f0906200047b565b91505062000091565b506040805180820190915260018152600060208201526200011f90600690600262000195565b50505050505062000497565b82805482825590600052602060002090810192821562000183579160200282015b828111156200018357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200014c565b506200019192915062000225565b5090565b600183019183908215620001835791602002820160005b83821115620001ec57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620001ac565b80156200021b5782816101000a81549060ff0219169055600101602081600001049283019260010302620001ec565b5050620001919291505b5b8082111562000191576000815560010162000226565b80516001600160a01b03811681146200025457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200029a576200029a62000259565b604052919050565b60006001600160401b03821115620002be57620002be62000259565b5060051b60200190565b600082601f830112620002da57600080fd5b81516020620002f3620002ed83620002a2565b6200026f565b82815260059290921b840181019181810190868411156200031357600080fd5b8286015b8481101562000330578051835291830191830162000317565b509695505050505050565b600080600080600060a086880312156200035457600080fd5b6200035f866200023c565b602087810151919650906001600160401b03808211156200037f57600080fd5b818901915089601f8301126200039457600080fd5b8151620003a5620002ed82620002a2565b81815260059190911b8301840190848101908c831115620003c557600080fd5b938501935b82851015620003ee57620003de856200023c565b82529385019390850190620003ca565b809950505050604089015195506060890151945060808901519250808311156200041757600080fd5b50506200042788828901620002c8565b9150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000821982111562000460576200046062000434565b500190565b634e487b7160e01b600052603260045260246000fd5b60006001820162000490576200049062000434565b5060010190565b611c5380620004a76000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636fac0fe9116100715780636fac0fe91461011f578063af3368f214610127578063d17ff2321461013c578063d6fc31511461014f578063fc735e9914610162578063ff4c4d541461017a57600080fd5b806308b78cda146100ae57806311adf753146100b85780631a485636146100cb578063231390e0146100de5780633bc5de301461010e575b600080fd5b6100b6610182565b005b6100b66100c6366004610c09565b6101c4565b6100b66100d9366004610c42565b61067d565b6100f16100ec366004610c5b565b6106ac565b6040516001600160a01b0390911681526020015b60405180910390f35b600354604051908152602001610105565b6100b6610750565b61012f6107ee565b6040516101059190610c76565b6100b661014a366004610c42565b610850565b6100b661015d366004610c5b565b6109d4565b61016a610b21565b6040519015158152602001610105565b6100b6610b68565b6000546001600160a01b031633146101b55760405162461bcd60e51b81526004016101ac90610cc3565b60405180910390fd5b6007805460ff19166001179055565b600654429060ff16158015906101e35750600654610100900460ff1615155b80156101f157506004548110155b80156101ff57506005548111155b61024b5760405162461bcd60e51b815260206004820152601f60248201527f436f6e73656e7420636f6e737472616374206973206e6f742076616c69642e0060448201526064016101ac565b6001546001600160a01b031633146102c45760405162461bcd60e51b815260206004820152603660248201527f4f6e6c7920746865206461746120436f6e74726f6c6c657220697320616c6c6f6044820152753bb2b2103a37903237903a3434b99030b1ba34b7b71760511b60648201526084016101ac565b6001600160a01b03851660009081526009602052604090205460ff16156103395760405162461bcd60e51b815260206004820152602360248201527f546869732070726f636573736f7220697320696e2074686520426c61636b6c6960448201526239ba1760e91b60648201526084016101ac565b6001600160a01b0385166000908152600a602052604081205460ff16610464576001546000546040516001600160a01b039283169290911690889061037d90610be0565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f0801580156103b9573d6000803e3d6000fd5b5060408051808201825260018082526001600160a01b0384811660208085019182528c83166000818152600a9092529581209451855492516001600160a81b0319909316901515610100600160a81b03191617610100929093169190910291909117909255600b805491820181559091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b03191690911790559050610486565b506001600160a01b038086166000908152600a60205260409020546101009004165b604051631511144760e11b8152600481018690526001600160a01b03821690632a22288e90602401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190610d2c565b1561057a5760405162461bcd60e51b815260206004820152604f60248201527f50726f636573736f722068617320616c7265616479207265717565737465642060448201527f746f2070726f63657373204453277320706572736f6e616c206461746120666f60648201526e39103a3434b990383ab93837b9b29760891b608482015260a4016101ac565b60008581526008602052604090205460ff16156106055760405163085e150f60e21b8152600481018690526024810185905260448101849052600160648201526001600160a01b03821690632178543c90608401600060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b50505050610675565b60405163085e150f60e21b8152600481018690526024810185905260448101849052600060648201526001600160a01b03821690632178543c90608401600060405180830381600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050505b505050505050565b6000546001600160a01b031633146106a75760405162461bcd60e51b81526004016101ac90610cc3565b600355565b6001600160a01b0381166000908152600a602052604081205460ff1661072c5760405162461bcd60e51b815260206004820152602f60248201527f50726f636573736f7220686173206e6f742072657175657374656420746f207060448201526e3937b1b2b9b990222993b99028221760891b60648201526084016101ac565b506001600160a01b039081166000908152600a602052604090205461010090041690565b6001546001600160a01b031632148061077357506000546001600160a01b031632145b61078f5760405162461bcd60e51b81526004016101ac90610d4e565b6000546001600160a01b031632036107ca576001600660005b602091828204019190066101000a81548160ff021916908360ff160217905550565b6001546001600160a01b031632036107ec576006805461ff0019166101001790555b565b6060600b80548060200260200160405190810160405280929190818152602001828054801561084657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610828575b5050505050905090565b6000546001600160a01b0316331461087a5760405162461bcd60e51b81526004016101ac90610cc3565b6000805b600b548110156109ba57600b818154811061089b5761089b610d16565b6000918252602080832091909101546001600160a01b03908116808452600a90925260409283902054925163b7a7af9960e01b8152600481018790529194506101009092049091169063b7a7af9990602401602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190610d2c565b156109a8576001600160a01b038281166000908152600a6020526040908190205490516305a8010b60e21b815260048101869052610100909104909116906316a0042c90602401600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505b806109b281610d92565b91505061087e565b50506000908152600860205260409020805460ff19169055565b6000546001600160a01b031633146109fe5760405162461bcd60e51b81526004016101ac90610cc3565b6001600160a01b0381166000908152600a602052604090205460ff16610a8c5760405162461bcd60e51b815260206004820152603f60248201527f50726f636573736f72206973206e6f742070726f63657373696e67204453277360448201527f20706572736f6e616c206461746120666f7220616e7920707572706f73652e0060648201526084016101ac565b6001600160a01b038082166000908152600a6020526040808220548151635b7cb57960e11b815291516101009091049093169263b6f96af29260048084019391929182900301818387803b158015610ae357600080fd5b505af1158015610af7573d6000803e3d6000fd5b5050506001600160a01b039091166000908152600960205260409020805460ff1916600117905550565b6006546000904290829060ff1615801590610b455750600654610100900460ff1615155b8015610b5357506004548210155b8015610b6157506005548211155b9392505050565b6001546001600160a01b0316321480610b8b57506000546001600160a01b031632145b610ba75760405162461bcd60e51b81526004016101ac90610d4e565b6000546001600160a01b03163203610bc35760006006816107a8565b6001546001600160a01b031632036107ec576000600660016107a8565b610e6480610dba83390190565b80356001600160a01b0381168114610c0457600080fd5b919050565b60008060008060808587031215610c1f57600080fd5b610c2885610bed565b966020860135965060408601359560600135945092505050565b600060208284031215610c5457600080fd5b5035919050565b600060208284031215610c6d57600080fd5b610b6182610bed565b6020808252825182820181905260009190848201906040850190845b81811015610cb75783516001600160a01b031683529284019291840191600101610c92565b50909695505050505050565b60208082526033908201527f4f6e6c79207468652064617461205375626a65637420697320616c6c6f776564604082015272103a37903237903a3434b99030b1ba34b7b71760691b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d3e57600080fd5b81518015158114610b6157600080fd5b60208082526024908201527f4163746f72206e6f7420616c6c6f77656420746f20646f20746869732061637460408201526334b7b71760e11b606082015260800190565b600060018201610db257634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50604051610e64380380610e6483398101604081905261002f9161011a565b326001600160a01b038416146100b15760405162461bcd60e51b815260206004820152603660248201527f5472616e73616374696f6e2073656e64657220646f6573206e6f74206d61746360448201527f687420776974682074686520436f6e74726f6c6c657200000000000000000000606482015260840160405180910390fd5b600080546001600160a01b03199081163317909155600280546001600160a01b0395861690831617905560018054938516938216939093179092556003805491909316911617905561015d565b80516001600160a01b038116811461011557600080fd5b919050565b60008060006060848603121561012f57600080fd5b610138846100fe565b9250610146602085016100fe565b9150610154604085016100fe565b90509250925092565b610cf88061016c6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633018205f1161008c5780634265c707116100665780634265c707146101c65780638753367f146101d7578063b6f96af2146101ea578063b7a7af99146101f257600080fd5b80633018205f1461018d578063373eed8d1461019e5780633a728745146101b157600080fd5b80630561bac3146100d457806316a0042c146100fe5780632178543c146101135780632a22288e146101265780632a26de85146101495780632e6473701461015c575b600080fd5b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61011161010c366004610b2d565b610205565b005b610111610121366004610b46565b610334565b610139610134366004610b2d565b6105e7565b60405190151581526020016100f5565b610111610157366004610b2d565b61060e565b61017f61016a366004610b2d565b60009081526004602052604090206001015490565b6040519081526020016100f5565b6002546001600160a01b03166100e1565b6101116101ac366004610b78565b610718565b6101b96107a3565b6040516100f59190610b9a565b6003546001600160a01b03166100e1565b6101396101e5366004610b2d565b6107fb565b610111610894565b610139610200366004610b2d565b610998565b6002546001600160a01b031632148061022857506001546001600160a01b031632145b8061023d57506003546001600160a01b031632145b6102625760405162461bcd60e51b815260040161025990610bde565b60405180910390fd5b60008181526004602052604090205460ff166102905760405162461bcd60e51b815260040161025990610c22565b6002546001600160a01b031632036102d8576000818152600460208190526040822001815b602091828204019190066101000a81548160ff021916908360ff16021790555050565b6001546001600160a01b0316320361030257600081815260046020819052604082200160016102b5565b6003546001600160a01b0316320361033157600081815260046020819052604090912001805462ff0000191690555b50565b6000546001600160a01b031633146103e65760405162461bcd60e51b815260206004820152606360248201527f4e65772050726f63657373696e6720707572706f73652063616e206f6e6c792060448201527f62652061646465642066726f6d2074686520436f6e73656e742053432066726f60648201527f6d207768696368207468697320507572706f73652053432077617320637265616084820152621d195960ea1b60a482015260c401610259565b6002546001600160a01b031632146104665760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c7920636f6e74726f6c6c65722063616e206164642061206e657720507260448201527f6f63657373696e6720707572706f736520746f207468697320534300000000006064820152608401610259565b60008481526004602052604090205460ff16156104d05760405162461bcd60e51b815260206004820152602260248201527f50726f63657373696e6720707572706f736520616c7265616479206578697374604482015261399760f11b6064820152608401610259565b6104d8610a67565b8160010361050357506040805160608101825260018082526020820152600091810191909152610523565b506040805160608101825260018152600060208201819052918101919091525b6040518060a00160405280600115158152602001858152602001428152602001844261054f9190610c91565b81526020908101839052600087815260048083526040918290208451815460ff1916901515178155928401516001840155908301516002830155606083015160038084019190915560808401516105a892840191610a85565b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001959095555050505050565b60008181526004602052604081205460ff161561060657506001919050565b506000919050565b6002546001600160a01b031632148061063157506001546001600160a01b031632145b8061064657506003546001600160a01b031632145b6106625760405162461bcd60e51b815260040161025990610bde565b60008181526004602052604090205460ff166106905760405162461bcd60e51b815260040161025990610c22565b6002546001600160a01b031632036106bd57600081815260046020819052604082206001929101906102b5565b6001546001600160a01b031632036106ea57600081815260046020819052604090912060019101816102b5565b6003546001600160a01b031632036103315760008181526004602081905260409091206001910160026102b5565b6001546001600160a01b0316321461078e5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79207468652064617461205375626a65637420697320616c6c6f776564604482015272103a37903237903a3434b99030b1ba34b7b71760691b6064820152608401610259565b60009182526004602052604090912060010155565b606060058054806020026020016040519081016040528092919081815260200182805480156107f157602002820191906000526020600020905b8154815260200190600101908083116107dd575b5050505050905090565b60008181526004602052604081205460ff166108295760405162461bcd60e51b815260040161025990610c22565b60008281526004602081905260408220015442919061010081048116620100009091041660ff161580159061086f57506000848152600460205260409020600201548210155b801561088c57506000848152600460205260409020600301548211155b949350505050565b6002546001600160a01b03163214806108b757506001546001600160a01b031632145b806108cc57506003546001600160a01b031632145b6108e85760405162461bcd60e51b815260040161025990610bde565b6005546109425760405162461bcd60e51b815260206004820152602260248201527f4e6f2050726f63657373696e6720707572706f736573206f6e20746869732053604482015261219760f11b6064820152608401610259565b6002546001600160a01b031632036109605761095e60006109dd565b565b6001546001600160a01b0316320361097c5761095e60016109dd565b6003546001600160a01b0316320361095e5761095e60026109dd565b600081815260046020526040812054819060ff166109b8575060006109d7565b5060008281526004602081905260409091200154610100900460ff1615155b92915050565b60005b600554811015610a635760006004600060058481548110610a0357610a03610c65565b906000526020600020015481526020019081526020016000206004018360038110610a3057610a30610c65565b602091828204019190066101000a81548160ff021916908360ff1602179055508080610a5b90610ca9565b9150506109e0565b5050565b60405180606001604052806003906020820280368337509192915050565b600183019183908215610b085791602002820160005b83821115610ad957835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610a9b565b8015610b065782816101000a81549060ff0219169055600101602081600001049283019260010302610ad9565b505b50610b14929150610b18565b5090565b5b80821115610b145760008155600101610b19565b600060208284031215610b3f57600080fd5b5035919050565b60008060008060808587031215610b5c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215610b8b57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610bd257835183529284019291840191600101610bb6565b50909695505050505050565b60208082526024908201527f4163746f72206e6f7420616c6c6f77656420746f20646f20746869732061637460408201526334b7b71760e11b606082015260800190565b60208082526023908201527f50726f63657373696e6720707572706f736520646f6573206e6f7420657869736040820152623a399760e91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610ca457610ca4610c7b565b500190565b600060018201610cbb57610cbb610c7b565b506001019056fea26469706673582212207afa85c4a97bd23f83839038392d4d7206629a7e794784980b66d975464f4e3e64736f6c634300080f0033a264697066735822122047daec0177637c184516e4d5b053f3e58817013e456a39c9a4bdd6a92365a36664736f6c634300080f0033";

    public static final String FUNC_ERASEDATA = "eraseData";

    public static final String FUNC_GETALLPROCESSORS = "getAllProcessors";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_GETPROCESSINGCONSENTSC = "getProcessingConsentSC";

    public static final String FUNC_GRANTCONSENT = "grantConsent";

    public static final String FUNC_MODIFYDATA = "modifyData";

    public static final String FUNC_NEWPURPOSE = "newPurpose";

    public static final String FUNC_REVOKECONSENT = "revokeConsent";

    public static final String FUNC_REVOKECONSENTPROCESSOR = "revokeConsentProcessor";

    public static final String FUNC_REVOKECONSENTPURPOSE = "revokeConsentPurpose";

    public static final String FUNC_VERIFY = "verify";

    @Deprecated
    protected CollectionConsent(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CollectionConsent(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CollectionConsent(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CollectionConsent(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> eraseData() {
        final Function function = new Function(
                FUNC_ERASEDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllProcessors() {
        final Function function = new Function(FUNC_GETALLPROCESSORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getData() {
        final Function function = new Function(FUNC_GETDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getProcessingConsentSC(String processor) {
        final Function function = new Function(FUNC_GETPROCESSINGCONSENTSC, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, processor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantConsent() {
        final Function function = new Function(
                FUNC_GRANTCONSENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> modifyData(BigInteger _data) {
        final Function function = new Function(
                FUNC_MODIFYDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newPurpose(String processor, BigInteger processingPurpose, BigInteger _data, BigInteger duration) {
        final Function function = new Function(
                FUNC_NEWPURPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, processor), 
                new org.web3j.abi.datatypes.generated.Uint256(processingPurpose), 
                new org.web3j.abi.datatypes.generated.Uint256(_data), 
                new org.web3j.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsent() {
        final Function function = new Function(
                FUNC_REVOKECONSENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsentProcessor(String processor) {
        final Function function = new Function(
                FUNC_REVOKECONSENTPROCESSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, processor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeConsentPurpose(BigInteger purpose) {
        final Function function = new Function(
                FUNC_REVOKECONSENTPURPOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(purpose)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> verify() {
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static CollectionConsent load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CollectionConsent(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CollectionConsent load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CollectionConsent(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CollectionConsent load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CollectionConsent(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CollectionConsent load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CollectionConsent(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CollectionConsent> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _dataController, List<String> _recipients, BigInteger _data, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dataController), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_data), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(CollectionConsent.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CollectionConsent> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _dataController, List<String> _recipients, BigInteger _data, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dataController), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_data), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(CollectionConsent.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CollectionConsent> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _dataController, List<String> _recipients, BigInteger _data, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dataController), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_data), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(CollectionConsent.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CollectionConsent> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _dataController, List<String> _recipients, BigInteger _data, BigInteger duration, List<BigInteger> _defaultPurposes) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dataController), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_recipients, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_data), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_defaultPurposes, org.web3j.abi.datatypes.generated.Uint256.class))));
        return deployRemoteCall(CollectionConsent.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
